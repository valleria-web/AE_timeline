@startuml timeline

skinparam packageStyle rectangle

' === PUBLICO (Front-end) ===
package "Public" {
    class index_html << (F,#FFDBAA) >>
    class style_css  << (F,#E2EEFF) >>
    class main_js    << (F,#E2FFDB) >>
    class TimelineView_js << (F,#E2FFDB) >> {
        + render(timelineData)
    }
}

' === DATA ===
package "dataTimelineMD" {
    package "awards" {}
    package "events" {}
    package "participants" {}
    package "years" {}
}


' === MODELO ===
package "Modelo" {
    class Timeline {
        - years: Year[]
        + addYear()
        + getYears()
        + getData()
    }

    class Year {
        - value: string
        - description: string
        - events: Event[]
        + addEvent()
        + getEvents()
        + getData()
    }

    class Event {
        - title: string
        - date: string
        - city: string
        - country: string
        - participants: Participant[]
        + addParticipant()
        + getParticipant()
        + getData()
    }

    class Participant {
        - name: string
        - role: string
        - img: string
        - events: Event[]
        - awards: Award[]
        + addEvent()
        + addAward()
        + getData()
    }

    class Award {
        - name: string
        - description: string
        + getData()
    }
}

' === CONTROLADORES ===
package "Controladores" {
    class App {
        + init(): Timeline
    }
}

' === SERVIDOR ===
package "Servidor" {
    class server_js << (F,#FFDDAA) >> {
        + GET /api/timeline
        + express.static("public")
        + listen(port)
    }
}

' === DATA Parser ===
package "dataParser" {
    class YearParser {
        + static parseFromMd(filePath): Year
    }
    class EventParser {
        + static parseFromMD(filePath): Event
    }
    class ParticipantParser {
        + static parseFromMD(filePath): Participant
    }
    class AwardParser {
        + static parseFromMD(filePath): Award
    }
}

' === RELACIONES ENTRE CAPAS ===

Timeline *-- Year           : composition
Year *-- Event             : composition
Event *-- Participant      : composition
Participant *-- Award      : composition
Participant o-- Event      : aggregation

YearParser ..> Year        : crea instancia
EventParser ..> Event      : crea instancia
ParticipantParser ..> Participant : crea instancia
AwardParser ..> Award      : crea instancia

App --> Timeline           : crea/administra
App ..> YearParser         : envía filePath
App ..> EventParser        : envía filePath
App ..> ParticipantParser  : envía filePath
App ..> AwardParser        : envía filePath

server_js --> App          : usa init()
server_js --> Public       : sirve carpeta estática

index_html --> style_css   : "vincula"
index_html --> main_js     : "carga script"
main_js --> server_js      : "fetch datos"
main_js --> TimelineView_js: "importa"
TimelineView_js --> index_html : "renderiza en"

' Relación data <-> Parser
YearParser ..> dataTimelineMD : "lee y parsea desde .md"
EventParser ..> dataTimelineMD: "lee eventos"
ParticipantParser ..> dataTimelineMD: "lee participantes"
AwardParser ..> dataTimelineMD: "lee premios"

@enduml

